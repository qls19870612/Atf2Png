<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="1048" height="1048"
					   addedToStage="windowedapplication1_addedToStageHandler(event)">
	
	<fx:Script>
		<![CDATA[  
			import game.tool.LogWriter;
			public static const logUrl:String = File.applicationDirectory.nativePath;
			import mx.managers.DragManager;
			
			public static var THIS:Atf2Png;
			private var textInfo:Vector.<String> = new Vector.<String>;
			private var png2AtfUtils:Png2AtfUtils;
			protected function button1_clickHandler(event:MouseEvent):void
			{
		 
	 
//				toPng(new File("D:/SVN/client/sourceCode/SummonWorld2/resources/zhCN/ATF/pc/assets/atlasATF/atlasATF/preload/effect.atf"));
			 	 
//				var pictureUtils:PictureUtils = new PictureUtils();
//				pictureUtils.packagePic("D:/SVN/client/sourceCode/SummonWorld2/resources/zhCN/ATF/pc/assets/atlasATF/atlasATF/preload/PNG",new File("D:/client_workspace/NewPackagePng"));
//		 		testXml();
//				new Atf2pngUtils(this.stage);
//			 	new PngSliceUtils().slicePng();
 
				
				
		 
			}

			
			protected function windowedapplication1_addedToStageHandler(event:Event):void
			{
				LogWriter.removeMoreLog(logUrl);
				THIS = this;
				new Atf2pngUtils(this.stage);
			
				

			}
			
			public static function addLog(info:String):void{
				var date:Date = new Date();
				var time:String = "[" + LogWriter.getDateStr(date) + " " + LogWriter.getTimeStr(date) + "] ";
				LogWriter.writeToHistoryFile(logUrl,time + info);
			}
	 
			public function addError(info:String):void
			{
				var errorInfo:String = "ERROR: "+info;
				addInfo(errorInfo);	
				addLog(errorInfo);
			}
			public function addInfo(info:String):void
			{
				if (!info) 
				{
					return;
					
				}
			
				var append:Boolean = false;
				if (info.indexOf(".")==0&&textInfo.length> 0) 
				{
					textInfo[textInfo.length-1] = textInfo[textInfo.length-1] + info; 	
				}
				else{
					textInfo.push(info);	
		
					append = true;
				}
				 
				 var maxCount:uint = 100;
				 if (textInfo.length > maxCount) 
				 {
					 textInfo = textInfo.splice(0,maxCount/2);
					 this.infoArea.text = textInfo.join("\n");	 
					 
				 }
				 if(append){
					 
					this.infoArea.appendText(info+"\n");
				 }
				 else{
					 this.infoArea.appendText(info);
				 }
				 
				
			}
			
			protected function recover_changeHandler(event:Event):void
			{
				PictureUtils.recoverFile = (event.currentTarget as CheckBox).selected;
				
			}
			
			protected function flashBitmapCut_changeHandler(event:Event):void
			{
				PicturePackager.flashCut = (event.currentTarget as CheckBox).selected;
			}
			
		
			
			
			
			protected function onDragEnter(event:NativeDragEvent):void
			{
				var border:BorderContainer = event.currentTarget as BorderContainer;
				var level:int = getPickLevel(border);
				var clip:Clipboard = event.clipboard;
				if(clip.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
				{
					var files:Array = clip.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
					for each(var f:File in files)
					{
						if (level > 0) 
						{
							
							if(f.isDirectory)
							{
								DragManager.acceptDragDrop(border);
								return;
								 
							}
						}
						DragManager.acceptDragDrop(border);
						return;
						
						
					}
				}
				
			}
			
			protected function onDragDrop(event:NativeDragEvent):void
			{
				var clip:Clipboard = event.clipboard;
				var borderContainer:BorderContainer = event.currentTarget as BorderContainer;
				var level:int = getPickLevel(borderContainer);
				
				if (level <= 0) 
				{
					level = 0;
					if (!this.png2AtfUtils) 
					{
						this.png2AtfUtils =new Png2AtfUtils();
					}
				}
				if(clip.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
				{
					var files:Array = clip.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
					if (level > 0) 
					{
						for each(var f:File in files)
						{
							if(f.isDirectory)
							{
								
								var pictureUtils:PictureUtils = new PictureUtils();
								
								pictureUtils.packDir(f,level);
							}
						}
					}
					else{
						for each (var ff:File in files) 
						{
							this.png2AtfUtils.convert(ff,null);
						}  
					}
					
				}
			}
			
			private function getPickLevel(borderContainer:BorderContainer):int
			{
				switch(borderContainer)
				{
					case splitePack1:
 						return 0;
					case splitePack2:
						return 1;
					case splitePack3:
						return 2;
					default:
						return 0;
				}
			}
			
		
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%">
		<s:HGroup>
			<s:Button label="开始转换" click="button1_clickHandler(event)"/>
			<s:CheckBox label="覆盖旧文件" change="recover_changeHandler(event)"/>
			<s:CheckBox label="Flash位图裁剪算法" change="flashBitmapCut_changeHandler(event)" selected="true"/>
			
		</s:HGroup>
	 
		<s:HGroup width="100%">
			<s:BorderContainer id="splitePack1" width="30%" height="100" backgroundColor="0x000066"
							   nativeDragDrop="onDragDrop(event)"
							   nativeDragEnter="onDragEnter(event)">
				<s:Label text="拖动进来打包单张图片"  verticalAlign="middle" horizontalCenter="middle" width="100%" height="100%" textAlign="center"/>
			</s:BorderContainer>
			<s:BorderContainer id="splitePack2" width="30%" height="100" backgroundColor="0x006600"
							   nativeDragDrop="onDragDrop(event)"
							   nativeDragEnter="onDragEnter(event)">
				
				<s:Label text="拖动进来打包1级目录"  verticalAlign="middle" horizontalCenter="middle" width="100%" height="100%" textAlign="center" />
			</s:BorderContainer>
			<s:BorderContainer id="splitePack3" width="40%" height="100" backgroundColor="0x000066"
							   nativeDragDrop="onDragDrop(event)"
							   nativeDragEnter="onDragEnter(event)">
				<s:Label text="拖动进来打包2级目录"  verticalAlign="middle" horizontalCenter="middle" width="100%" height="100%" textAlign="center"/>
			</s:BorderContainer>
		</s:HGroup>
		<s:TextArea id="infoArea" width="100%" height="500"/>
	 
	</s:VGroup>
</s:WindowedApplication>
